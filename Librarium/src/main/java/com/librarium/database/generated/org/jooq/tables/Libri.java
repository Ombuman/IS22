/*
 * This file is generated by jOOQ.
 */
package com.librarium.database.generated.org.jooq.tables;


import com.librarium.database.generated.org.jooq.DefaultSchema;
import com.librarium.database.generated.org.jooq.Keys;
import com.librarium.database.generated.org.jooq.tables.records.LibriRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Libri extends TableImpl<LibriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Libri</code>
     */
    public static final Libri LIBRI = new Libri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibriRecord> getRecordType() {
        return LibriRecord.class;
    }

    /**
     * The column <code>Libri.id</code>.
     */
    public final TableField<LibriRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Libri.titolo</code>.
     */
    public final TableField<LibriRecord, String> TITOLO = createField(DSL.name("titolo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Libri.copertina</code>.
     */
    public final TableField<LibriRecord, String> COPERTINA = createField(DSL.name("copertina"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Libri.anno</code>.
     */
    public final TableField<LibriRecord, String> ANNO = createField(DSL.name("anno"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Libri.categoria</code>.
     */
    public final TableField<LibriRecord, String> CATEGORIA = createField(DSL.name("categoria"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Libri.autore</code>.
     */
    public final TableField<LibriRecord, Integer> AUTORE = createField(DSL.name("autore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Libri.casa_editrice</code>.
     */
    public final TableField<LibriRecord, Integer> CASA_EDITRICE = createField(DSL.name("casa_editrice"), SQLDataType.INTEGER.nullable(false), this, "");

    private Libri(Name alias, Table<LibriRecord> aliased) {
        this(alias, aliased, null);
    }

    private Libri(Name alias, Table<LibriRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Libri</code> table reference
     */
    public Libri(String alias) {
        this(DSL.name(alias), LIBRI);
    }

    /**
     * Create an aliased <code>Libri</code> table reference
     */
    public Libri(Name alias) {
        this(alias, LIBRI);
    }

    /**
     * Create a <code>Libri</code> table reference
     */
    public Libri() {
        this(DSL.name("Libri"), null);
    }

    public <O extends Record> Libri(Table<O> child, ForeignKey<O, LibriRecord> key) {
        super(child, key, LIBRI);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LibriRecord> getPrimaryKey() {
        return Keys.PK_LIBRI;
    }

    @Override
    public List<UniqueKey<LibriRecord>> getKeys() {
        return Arrays.<UniqueKey<LibriRecord>>asList(Keys.PK_LIBRI);
    }

    @Override
    public List<ForeignKey<LibriRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LibriRecord, ?>>asList(Keys.FK_LIBRI_CATEGORIE_1, Keys.FK_LIBRI_AUTORI_1, Keys.FK_LIBRI_CASEEDITRICI_1);
    }

    private transient Categorie _categorie;
    private transient Autori _autori;
    private transient Caseeditrici _caseeditrici;

    public Categorie categorie() {
        if (_categorie == null)
            _categorie = new Categorie(this, Keys.FK_LIBRI_CATEGORIE_1);

        return _categorie;
    }

    public Autori autori() {
        if (_autori == null)
            _autori = new Autori(this, Keys.FK_LIBRI_AUTORI_1);

        return _autori;
    }

    public Caseeditrici caseeditrici() {
        if (_caseeditrici == null)
            _caseeditrici = new Caseeditrici(this, Keys.FK_LIBRI_CASEEDITRICI_1);

        return _caseeditrici;
    }

    @Override
    public Libri as(String alias) {
        return new Libri(DSL.name(alias), this);
    }

    @Override
    public Libri as(Name alias) {
        return new Libri(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Libri rename(String name) {
        return new Libri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Libri rename(Name name) {
        return new Libri(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
