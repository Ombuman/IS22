/*
 * This file is generated by jOOQ.
 */
package com.librarium.database.generated.org.jooq.tables;


import com.librarium.database.generated.org.jooq.DefaultSchema;
import com.librarium.database.generated.org.jooq.Keys;
import com.librarium.database.generated.org.jooq.tables.records.GeneriRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Generi extends TableImpl<GeneriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Generi</code>
     */
    public static final Generi GENERI = new Generi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneriRecord> getRecordType() {
        return GeneriRecord.class;
    }

    /**
     * The column <code>Generi.ID</code>.
     */
    public final TableField<GeneriRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Generi.Nome</code>.
     */
    public final TableField<GeneriRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.CLOB, this, "");

    private Generi(Name alias, Table<GeneriRecord> aliased) {
        this(alias, aliased, null);
    }

    private Generi(Name alias, Table<GeneriRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Generi</code> table reference
     */
    public Generi(String alias) {
        this(DSL.name(alias), GENERI);
    }

    /**
     * Create an aliased <code>Generi</code> table reference
     */
    public Generi(Name alias) {
        this(alias, GENERI);
    }

    /**
     * Create a <code>Generi</code> table reference
     */
    public Generi() {
        this(DSL.name("Generi"), null);
    }

    public <O extends Record> Generi(Table<O> child, ForeignKey<O, GeneriRecord> key) {
        super(child, key, GENERI);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<GeneriRecord, Integer> getIdentity() {
        return (Identity<GeneriRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GeneriRecord> getPrimaryKey() {
        return Keys.PK_GENERI;
    }

    @Override
    public List<UniqueKey<GeneriRecord>> getKeys() {
        return Arrays.<UniqueKey<GeneriRecord>>asList(Keys.PK_GENERI);
    }

    @Override
    public Generi as(String alias) {
        return new Generi(DSL.name(alias), this);
    }

    @Override
    public Generi as(Name alias) {
        return new Generi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Generi rename(String name) {
        return new Generi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Generi rename(Name name) {
        return new Generi(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
