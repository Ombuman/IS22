/*
 * This file is generated by jOOQ.
 */
package com.librarium.database.generated.org.jooq.tables;


import com.librarium.database.generated.org.jooq.DefaultSchema;
import com.librarium.database.generated.org.jooq.Keys;
import com.librarium.database.generated.org.jooq.tables.records.UtentiRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Utenti extends TableImpl<UtentiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Utenti</code>
     */
    public static final Utenti UTENTI = new Utenti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtentiRecord> getRecordType() {
        return UtentiRecord.class;
    }

    /**
     * The column <code>Utenti.id</code>.
     */
    public final TableField<UtentiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Utenti.nome</code>.
     */
    public final TableField<UtentiRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Utenti.cognome</code>.
     */
    public final TableField<UtentiRecord, String> COGNOME = createField(DSL.name("cognome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Utenti.email</code>.
     */
    public final TableField<UtentiRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Utenti.password</code>.
     */
    public final TableField<UtentiRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    private Utenti(Name alias, Table<UtentiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Utenti(Name alias, Table<UtentiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Utenti</code> table reference
     */
    public Utenti(String alias) {
        this(DSL.name(alias), UTENTI);
    }

    /**
     * Create an aliased <code>Utenti</code> table reference
     */
    public Utenti(Name alias) {
        this(alias, UTENTI);
    }

    /**
     * Create a <code>Utenti</code> table reference
     */
    public Utenti() {
        this(DSL.name("Utenti"), null);
    }

    public <O extends Record> Utenti(Table<O> child, ForeignKey<O, UtentiRecord> key) {
        super(child, key, UTENTI);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UtentiRecord> getPrimaryKey() {
        return Keys.PK_UTENTI;
    }

    @Override
    public List<UniqueKey<UtentiRecord>> getKeys() {
        return Arrays.<UniqueKey<UtentiRecord>>asList(Keys.PK_UTENTI, Keys.SQLITE_AUTOINDEX_UTENTI_1);
    }

    @Override
    public Utenti as(String alias) {
        return new Utenti(DSL.name(alias), this);
    }

    @Override
    public Utenti as(Name alias) {
        return new Utenti(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utenti rename(String name) {
        return new Utenti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utenti rename(Name name) {
        return new Utenti(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
