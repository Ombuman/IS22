/*
 * This file is generated by jOOQ.
 */
package com.librarium.database.generated.org.jooq.tables;


import com.librarium.database.generated.org.jooq.DefaultSchema;
import com.librarium.database.generated.org.jooq.Keys;
import com.librarium.database.generated.org.jooq.tables.records.SollecitiRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Solleciti extends TableImpl<SollecitiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Solleciti</code>
     */
    public static final Solleciti SOLLECITI = new Solleciti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SollecitiRecord> getRecordType() {
        return SollecitiRecord.class;
    }

    /**
     * The column <code>Solleciti.id</code>.
     */
    public final TableField<SollecitiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Solleciti.utente</code>.
     */
    public final TableField<SollecitiRecord, Integer> UTENTE = createField(DSL.name("utente"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Solleciti.libro</code>.
     */
    public final TableField<SollecitiRecord, Integer> LIBRO = createField(DSL.name("libro"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Solleciti.data</code>.
     */
    public final TableField<SollecitiRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    private Solleciti(Name alias, Table<SollecitiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Solleciti(Name alias, Table<SollecitiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Solleciti</code> table reference
     */
    public Solleciti(String alias) {
        this(DSL.name(alias), SOLLECITI);
    }

    /**
     * Create an aliased <code>Solleciti</code> table reference
     */
    public Solleciti(Name alias) {
        this(alias, SOLLECITI);
    }

    /**
     * Create a <code>Solleciti</code> table reference
     */
    public Solleciti() {
        this(DSL.name("Solleciti"), null);
    }

    public <O extends Record> Solleciti(Table<O> child, ForeignKey<O, SollecitiRecord> key) {
        super(child, key, SOLLECITI);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SollecitiRecord, Integer> getIdentity() {
        return (Identity<SollecitiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SollecitiRecord> getPrimaryKey() {
        return Keys.PK_SOLLECITI;
    }

    @Override
    public List<UniqueKey<SollecitiRecord>> getKeys() {
        return Arrays.<UniqueKey<SollecitiRecord>>asList(Keys.PK_SOLLECITI);
    }

    @Override
    public Solleciti as(String alias) {
        return new Solleciti(DSL.name(alias), this);
    }

    @Override
    public Solleciti as(Name alias) {
        return new Solleciti(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Solleciti rename(String name) {
        return new Solleciti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Solleciti rename(Name name) {
        return new Solleciti(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
