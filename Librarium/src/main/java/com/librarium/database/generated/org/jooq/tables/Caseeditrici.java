/*
 * This file is generated by jOOQ.
 */
package com.librarium.database.generated.org.jooq.tables;


import com.librarium.database.generated.org.jooq.DefaultSchema;
import com.librarium.database.generated.org.jooq.Keys;
import com.librarium.database.generated.org.jooq.tables.records.CaseeditriciRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Caseeditrici extends TableImpl<CaseeditriciRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CaseEditrici</code>
     */
    public static final Caseeditrici CASEEDITRICI = new Caseeditrici();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseeditriciRecord> getRecordType() {
        return CaseeditriciRecord.class;
    }

    /**
     * The column <code>CaseEditrici.id</code>.
     */
    public final TableField<CaseeditriciRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CaseEditrici.nome</code>.
     */
    public final TableField<CaseeditriciRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    private Caseeditrici(Name alias, Table<CaseeditriciRecord> aliased) {
        this(alias, aliased, null);
    }

    private Caseeditrici(Name alias, Table<CaseeditriciRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CaseEditrici</code> table reference
     */
    public Caseeditrici(String alias) {
        this(DSL.name(alias), CASEEDITRICI);
    }

    /**
     * Create an aliased <code>CaseEditrici</code> table reference
     */
    public Caseeditrici(Name alias) {
        this(alias, CASEEDITRICI);
    }

    /**
     * Create a <code>CaseEditrici</code> table reference
     */
    public Caseeditrici() {
        this(DSL.name("CaseEditrici"), null);
    }

    public <O extends Record> Caseeditrici(Table<O> child, ForeignKey<O, CaseeditriciRecord> key) {
        super(child, key, CASEEDITRICI);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CaseeditriciRecord> getPrimaryKey() {
        return Keys.PK_CASEEDITRICI;
    }

    @Override
    public List<UniqueKey<CaseeditriciRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseeditriciRecord>>asList(Keys.PK_CASEEDITRICI);
    }

    @Override
    public Caseeditrici as(String alias) {
        return new Caseeditrici(DSL.name(alias), this);
    }

    @Override
    public Caseeditrici as(Name alias) {
        return new Caseeditrici(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Caseeditrici rename(String name) {
        return new Caseeditrici(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Caseeditrici rename(Name name) {
        return new Caseeditrici(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
